import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

class AIService {
  static const String _openaiBaseUrl = 'https://api.openai.com/v1';
  static const String _deepseekBaseUrl = 'https://api.deepseek.com/v1';
  
  // سيتم جلب هذه المفاتيح من Firebase
  static String? _openaiApiKey;
  static String? _deepseekApiKey;
  
  // نوع الذكاء الاصطناعي المستخدم
  static AIProvider _currentProvider = AIProvider.openai;
  
  // إعداد مفاتيح API
  static void setApiKeys({String? openaiKey, String? deepseekKey}) {
    _openaiApiKey = openaiKey;
    _deepseekApiKey = deepseekKey;
  }
  
  // تغيير مزود الذكاء الاصطناعي
  static void setProvider(AIProvider provider) {
    _currentProvider = provider;
  }
  
  // الحصول على استجابة من الذكاء الاصطناعي
  static Future<String> getChatResponse(String userMessage, {List<ChatMessage>? conversationHistory}) async {
    try {
      switch (_currentProvider) {
        case AIProvider.openai:
          return await _getOpenAIResponse(userMessage, conversationHistory);
        case AIProvider.deepseek:
          return await _getDeepSeekResponse(userMessage, conversationHistory);
        default:
          return _getFallbackResponse(userMessage);
      }
    } catch (e) {
      print('خطأ في AI Service: $e');
      return _getFallbackResponse(userMessage);
    }
  }
  
  // استجابة من OpenAI/ChatGPT
  static Future<String> _getOpenAIResponse(String userMessage, List<ChatMessage>? history) async {
    if (_openaiApiKey == null || _openaiApiKey!.isEmpty) {
      return _getFallbackResponse(userMessage);
    }
    
    try {
      final messages = _buildConversationMessages(userMessage, history);
      
      final response = await http.post(
        Uri.parse('$_openaiBaseUrl/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $_openaiApiKey',
        },
        body: jsonEncode({
          'model': 'gpt-3.5-turbo',
          'messages': messages,
          'max_tokens': 500,
          'temperature': 0.7,
          'system': _getSystemPrompt(),
        }),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final content = data['choices'][0]['message']['content'];
        return content?.trim() ?? _getFallbackResponse(userMessage);
      } else {
        print('خطأ OpenAI: ${response.statusCode} - ${response.body}');
        return _getFallbackResponse(userMessage);
      }
    } catch (e) {
      print('خطأ في OpenAI: $e');
      return _getFallbackResponse(userMessage);
    }
  }
  
  // استجابة من DeepSeek
  static Future<String> _getDeepSeekResponse(String userMessage, List<ChatMessage>? history) async {
    if (_deepseekApiKey == null || _deepseekApiKey!.isEmpty) {
      return _getFallbackResponse(userMessage);
    }
    
    try {
      final messages = _buildConversationMessages(userMessage, history);
      
      final response = await http.post(
        Uri.parse('$_deepseekBaseUrl/chat/completions'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $_deepseekApiKey',
        },
        body: jsonEncode({
          'model': 'deepseek-chat',
          'messages': messages,
          'max_tokens': 500,
          'temperature': 0.7,
          'stream': false,
        }),
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final content = data['choices'][0]['message']['content'];
        return content?.trim() ?? _getFallbackResponse(userMessage);
      } else {
        print('خطأ DeepSeek: ${response.statusCode} - ${response.body}');
        return _getFallbackResponse(userMessage);
      }
    } catch (e) {
      print('خطأ في DeepSeek: $e');
      return _getFallbackResponse(userMessage);
    }
  }
  
  // بناء رسائل المحادثة للـ API
  static List<Map<String, String>> _buildConversationMessages(String userMessage, List<ChatMessage>? history) {
    List<Map<String, String>> messages = [
      {
        'role': 'system',
        'content': _getSystemPrompt(),
      }
    ];
    
    // إضافة تاريخ المحادثة (آخر 10 رسائل فقط لتوفير التكلفة)
    if (history != null && history.isNotEmpty) {
      final recentHistory = history.length > 10 ? history.sublist(history.length - 10) : history;
      
      for (final message in recentHistory) {
        messages.add({
          'role': message.isUser ? 'user' : 'assistant',
          'content': message.text,
        });
      }
    }
    
    // إضافة الرسالة الحالية
    messages.add({
      'role': 'user',
      'content': userMessage,
    });
    
    return messages;
  }
  
  // النص التوجيهي للذكاء الاصطناعي
  static String _getSystemPrompt() {
    return '''أنت بوت ميم الذكي، مساعد متخصص في ريادة الأعمال والمشاريع التجارية.

مهمتك:
- مساعدة رواد الأعمال في تطوير مشاريعهم
- تقديم نصائح عملية ومفيدة
- الإجابة على أسئلة التمويل والتسويق ودراسات الجدوى
- استخدام نبرة ودودة وتشجيعية
- الرد باللغة العربية دائماً

تخصصاتك:
- تطوير أفكار المشاريع
- دراسات الجدوى المالية والتسويقية
- استراتيجيات التمويل والاستثمار
- خطط التسويق والمبيعات
- تحليل المنافسين والأسواق
- إدارة المشاريع والفرق

أسلوبك:
- استخدم الرموز التعبيرية بشكل مناسب
- قدم نصائح عملية قابلة للتطبيق
- اطرح أسئلة توضيحية عند الحاجة
- شجع المستخدم وادعم ثقته بنفسه
- استخدم أمثلة واقعية عندما يكون ذلك مفيداً

تذكر: هدفك مساعدة رواد الأعمال على تحقيق النجاح!''';
  }
  
  // استجابة احتياطية عند فشل الـ APIs
  static String _getFallbackResponse(String userMessage) {
    final message = userMessage.toLowerCase();
    
    // استجابات ذكية محلية
    if (message.contains('مشروع') || message.contains('فكرة')) {
      return 'فكرة رائعة! 💡 لتطوير مشروعك بنجاح، أنصحك بالتالي:\n\n'
             '1️⃣ ابدأ بدراسة السوق المستهدف\n'
             '2️⃣ حدد المشكلة التي يحلها مشروعك\n'
             '3️⃣ اعمل دراسة جدوى مفصلة\n'
             '4️⃣ ضع خطة تسويقية واضحة\n\n'
             'هل تريد مساعدة في أي من هذه النقاط؟';
    }
    
    if (message.contains('تمويل') || message.contains('استثمار')) {
      return 'التمويل خطوة مهمة! 💰 إليك أهم مصادر التمويل:\n\n'
             '🏦 القروض البنكية\n'
             '👥 المستثمرين الملائكة\n'
             '🏢 صناديق الاستثمار\n'
             '🎯 المنح الحكومية\n'
             '💳 التمويل الجماعي\n\n'
             'ما نوع المشروع الذي تخطط له؟ سأساعدك في اختيار الأنسب!';
    }
    
    if (message.contains('تسويق') || message.contains('عملاء')) {
      return 'التسويق مفتاح النجاح! 📈 إليك استراتيجيات فعالة:\n\n'
             '📱 التسويق الرقمي (وسائل التواصل)\n'
             '🎯 التسويق المستهدف\n'
             '🤝 التسويق بالمحتوى\n'
             '⭐ تجربة العملاء المميزة\n'
             '📊 تحليل البيانات والنتائج\n\n'
             'أخبرني عن جمهورك المستهدف وسأقترح خطة مخصصة!';
    }
    
    // استجابة عامة
    return 'شكراً لك على سؤالك! 😊\n\n'
           'أنا هنا لمساعدتك في جميع جوانب ريادة الأعمال. '
           'يمكنك سؤالي عن:\n\n'
           '• تطوير أفكار المشاريع\n'
           '• دراسات الجدوى\n'
           '• استراتيجيات التسويق\n'
           '• مصادر التمويل\n'
           '• حل المشاكل التجارية\n\n'
           'كيف يمكنني مساعدتك بشكل أكثر تحديداً؟';
  }
  
  // اختبار اتصال API
  static Future<bool> testConnection(AIProvider provider) async {
    try {
      final testMessage = "مرحبا";
      final response = await getChatResponse(testMessage);
      return response.isNotEmpty;
    } catch (e) {
      return false;
    }
  }
  
  // الحصول على معلومات الاستخدام
  static Future<Map<String, dynamic>> getUsageStats() async {
    // هنا يمكن إضافة منطق لجلب إحصائيات الاستخدام من Firebase
    return {
      'total_messages': 0,
      'tokens_used': 0,
      'cost_estimate': 0.0,
    };
  }
}

// أنواع مزودي الذكاء الاصطناعي
enum AIProvider {
  openai,
  deepseek,
}

// نموذج رسالة المحادثة
class ChatMessage {
  final String text;
  final bool isUser;
  final DateTime timestamp;

  ChatMessage({
    required this.text,
    required this.isUser,
    required this.timestamp,
  });
  
  Map<String, dynamic> toJson() {
    return {
      'text': text,
      'isUser': isUser,
      'timestamp': timestamp.toIso8601String(),
    };
  }
  
  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    return ChatMessage(
      text: json['text'],
      isUser: json['isUser'],
      timestamp: DateTime.parse(json['timestamp']),
    );
  }
}